{"message":"`instruction::Opcode` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":2174,"byte_end":2184,"line_start":76,"line_end":76,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":19,"highlight_end":29}],"label":"`instruction::Opcode` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":609,"byte_end":645,"line_start":16,"line_end":16,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":2094,"byte_end":2198,"line_start":74,"line_end":76,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":21,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/instruction.rs","byte_start":567,"byte_end":599,"line_start":41,"line_end":41,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        assert_eq!(opcode, Opcode::HLT);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":1655,"byte_end":2986,"line_start":66,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr) => ({","highlight_start":1,"highlight_end":36},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr,) => ({","highlight_start":1,"highlight_end":37},{"text":"        $crate::assert_eq!($left, $right)","highlight_start":1,"highlight_end":42},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":362,"byte_end":656,"line_start":11,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":1},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":1},{"text":"    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":1},{"text":"    ($msg:expr,) => ({ $crate::panic!($msg) });","highlight_start":1,"highlight_end":1},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":1},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":1},{"text":"    });","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":26851,"byte_end":27005,"line_start":813,"line_end":816,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `instruction::Opcode`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` or manually implement `std::fmt::Debug`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::fmt::Debug` for `&instruction::Opcode`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Debug::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `instruction::Opcode` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instruction.rs:41:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(opcode, Opcode::HLT);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`instruction::Opcode` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `instruction::Opcode`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::fmt::Debug` for `&instruction::Opcode`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::fmt::Debug::fmt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`instruction::Opcode` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":2186,"byte_end":2197,"line_start":76,"line_end":76,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":31,"highlight_end":42}],"label":"`instruction::Opcode` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":609,"byte_end":645,"line_start":16,"line_end":16,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":2094,"byte_end":2198,"line_start":74,"line_end":76,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":21,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/instruction.rs","byte_start":567,"byte_end":599,"line_start":41,"line_end":41,"column_start":9,"column_end":41,"is_primary":false,"text":[{"text":"        assert_eq!(opcode, Opcode::HLT);","highlight_start":9,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":1655,"byte_end":2986,"line_start":66,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr) => ({","highlight_start":1,"highlight_end":36},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr,) => ({","highlight_start":1,"highlight_end":37},{"text":"        $crate::assert_eq!($left, $right)","highlight_start":1,"highlight_end":42},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":362,"byte_end":656,"line_start":11,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":50},{"text":"    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":56},{"text":"    ($msg:expr,) => ({ $crate::panic!($msg) });","highlight_start":1,"highlight_end":48},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":35},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":26851,"byte_end":27005,"line_start":813,"line_end":816,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `instruction::Opcode`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` or manually implement `std::fmt::Debug`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::fmt::Debug` for `&instruction::Opcode`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Debug::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `instruction::Opcode` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instruction.rs:41:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(opcode, Opcode::HLT);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`instruction::Opcode` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `instruction::Opcode`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::fmt::Debug` for `&instruction::Opcode`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::fmt::Debug::fmt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`instruction::Opcode` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":2174,"byte_end":2184,"line_start":76,"line_end":76,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":19,"highlight_end":29}],"label":"`instruction::Opcode` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":609,"byte_end":645,"line_start":16,"line_end":16,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":2094,"byte_end":2198,"line_start":74,"line_end":76,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":21,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/instruction.rs","byte_start":705,"byte_end":749,"line_start":46,"line_end":46,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        assert_eq!(instruction.opcode, Opcode::HLT);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":1655,"byte_end":2986,"line_start":66,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr) => ({","highlight_start":1,"highlight_end":36},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr,) => ({","highlight_start":1,"highlight_end":37},{"text":"        $crate::assert_eq!($left, $right)","highlight_start":1,"highlight_end":42},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":362,"byte_end":656,"line_start":11,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":50},{"text":"    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":56},{"text":"    ($msg:expr,) => ({ $crate::panic!($msg) });","highlight_start":1,"highlight_end":48},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":35},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":26851,"byte_end":27005,"line_start":813,"line_end":816,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `instruction::Opcode`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` or manually implement `std::fmt::Debug`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::fmt::Debug` for `&instruction::Opcode`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Debug::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `instruction::Opcode` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instruction.rs:46:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(instruction.opcode, Opcode::HLT);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`instruction::Opcode` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `instruction::Opcode`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::fmt::Debug` for `&instruction::Opcode`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::fmt::Debug::fmt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`instruction::Opcode` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":2186,"byte_end":2197,"line_start":76,"line_end":76,"column_start":31,"column_end":42,"is_primary":true,"text":[{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":31,"highlight_end":42}],"label":"`instruction::Opcode` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":609,"byte_end":645,"line_start":16,"line_end":16,"column_start":38,"column_end":74,"is_primary":false,"text":[{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":38,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":2094,"byte_end":2198,"line_start":74,"line_end":76,"column_start":21,"column_end":43,"is_primary":false,"text":[{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":21,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/instruction.rs","byte_start":705,"byte_end":749,"line_start":46,"line_end":46,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        assert_eq!(instruction.opcode, Opcode::HLT);","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"assert_eq!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":1655,"byte_end":2986,"line_start":66,"line_end":99,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_eq {","highlight_start":1,"highlight_end":25},{"text":"    ($left:expr, $right:expr) => ({","highlight_start":1,"highlight_end":36},{"text":"        match (&$left, &$right) {","highlight_start":1,"highlight_end":34},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`\"#, &*left_val, &*right_val)","highlight_start":1,"highlight_end":43},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr,) => ({","highlight_start":1,"highlight_end":37},{"text":"        $crate::assert_eq!($left, $right)","highlight_start":1,"highlight_end":42},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($left:expr, $right:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":49},{"text":"        match (&($left), &($right)) {","highlight_start":1,"highlight_end":38},{"text":"            (left_val, right_val) => {","highlight_start":1,"highlight_end":39},{"text":"                if !(*left_val == *right_val) {","highlight_start":1,"highlight_end":48},{"text":"                    // The reborrows below are intentional. Without them, the stack slot for the","highlight_start":1,"highlight_end":97},{"text":"                    // borrow is initialized even before the values are compared, leading to a","highlight_start":1,"highlight_end":95},{"text":"                    // noticeable slow down.","highlight_start":1,"highlight_end":45},{"text":"                    panic!(r#\"assertion failed: `(left == right)`","highlight_start":1,"highlight_end":66},{"text":"  left: `{:?}`,","highlight_start":1,"highlight_end":16},{"text":" right: `{:?}`: {}\"#, &*left_val, &*right_val,","highlight_start":1,"highlight_end":47},{"text":"                           $crate::format_args!($($arg)+))","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"panic!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/macros.rs","byte_start":362,"byte_end":656,"line_start":11,"line_end":18,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    () => ({ $crate::panic!(\"explicit panic\") });","highlight_start":1,"highlight_end":50},{"text":"    ($msg:expr) => ({ $crate::rt::begin_panic($msg) });","highlight_start":1,"highlight_end":56},{"text":"    ($msg:expr,) => ({ $crate::panic!($msg) });","highlight_start":1,"highlight_end":48},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":35},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args!","def_site_span":{"file_name":"/home/indo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/macros/mod.rs","byte_start":26851,"byte_end":27005,"line_start":813,"line_end":816,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    macro_rules! format_args {","highlight_start":5,"highlight_end":31},{"text":"        ($fmt:expr) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":54},{"text":"        ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};","highlight_start":1,"highlight_end":68},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `instruction::Opcode`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` or manually implement `std::fmt::Debug`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::fmt::Debug` for `&instruction::Opcode`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Debug::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `instruction::Opcode` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instruction.rs:46:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(instruction.opcode, Opcode::HLT);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`instruction::Opcode` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `instruction::Opcode`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::fmt::Debug` for `&instruction::Opcode`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::fmt::Debug::fmt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
